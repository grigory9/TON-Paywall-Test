import { toNano, Address, beginCell, internal } from '@ton/core';
import { mnemonicToPrivateKey } from '@ton/crypto';
import { TonClient, WalletContractV4 } from '@ton/ton';
import { SubscriptionFactory } from '../build/SubscriptionFactory_SubscriptionFactory';
import * as dotenv from 'dotenv';

dotenv.config();

async function sleep(ms: number) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

(async () => {
    console.log('\n========================================');
    console.log('AUTHORIZE DEPLOYER WALLET');
    console.log('========================================\n');

    const ownerMnemonicStr = process.env.FACTORY_OWNER_MNEMONIC;
    if (!ownerMnemonicStr) {
        throw new Error('FACTORY_OWNER_MNEMONIC not found in .env');
    }

    // Get deployer mnemonic from admin-bot/.env
    const fs = require('fs');
    const adminEnvContent = fs.readFileSync('../admin-bot/.env', 'utf-8');
    const deployerMatch = adminEnvContent.match(/DEPLOYER_MNEMONIC="([^"]+)"/);
    if (!deployerMatch) {
        throw new Error('DEPLOYER_MNEMONIC not found in admin-bot/.env');
    }

    const deployerMnemonic = deployerMatch[1].split(' ');
    const deployerKeyPair = await mnemonicToPrivateKey(deployerMnemonic);
    const deployerWallet = WalletContractV4.create({
        workchain: 0,
        publicKey: deployerKeyPair.publicKey
    });
    const deployerAddress = deployerWallet.address;

    console.log('üë§ Deployer Address:', deployerAddress.toString({ testOnly: true }));

    const ownerMnemonic = ownerMnemonicStr.split(' ');
    const network = process.env.TON_NETWORK || 'testnet';
    const endpoint = network === 'mainnet'
        ? 'https://toncenter.com/api/v2/jsonRPC'
        : 'https://testnet.toncenter.com/api/v2/jsonRPC';
    const apiKey = process.env.TON_API_KEY || '';

    const client = new TonClient({ endpoint, apiKey });

    // Initialize owner wallet
    const ownerKeyPair = await mnemonicToPrivateKey(ownerMnemonic);
    const ownerWallet = WalletContractV4.create({
        workchain: 0,
        publicKey: ownerKeyPair.publicKey
    });

    const ownerContract = client.open(ownerWallet);
    const ownerAddress = ownerWallet.address;

    console.log('üëë Owner Address:', ownerAddress.toString({ testOnly: network === 'testnet' }));

    // Get factory address
    const factoryAddressStr = process.env.FACTORY_CONTRACT_ADDRESS;
    if (!factoryAddressStr) {
        throw new Error('FACTORY_CONTRACT_ADDRESS not found in .env');
    }

    const factoryAddress = Address.parse(factoryAddressStr);
    console.log('üè≠ Factory Address:', factoryAddress.toString({ testOnly: network === 'testnet' }));

    // Check balance
    const balance = await ownerContract.getBalance();
    console.log('üí∞ Owner Balance:', Number(balance) / 1e9, 'TON\n');

    if (balance < toNano('0.05')) {
        throw new Error('Insufficient balance. Need at least 0.05 TON.');
    }

    console.log('‚è≥ Authorizing deployer...');

    // Get seqno
    const seqno = await ownerContract.getSeqno();
    console.log('üìù Current seqno:', seqno);

    // Send SetDeployer message
    // SetDeployer { newDeployer: Address }
    // Opcode: 1776922640 (0x69fb4c90) - Generated by Tact compiler
    const body = beginCell()
        .storeUint(1776922640, 32) // SetDeployer opcode
        .storeAddress(deployerAddress)
        .endCell();

    await ownerContract.sendTransfer({
        seqno,
        secretKey: ownerKeyPair.secretKey,
        messages: [
            internal({
                to: factoryAddress,
                value: toNano('0.05'),
                bounce: true,
                body: body
            })
        ]
    });

    console.log('‚úÖ Authorization transaction sent!');
    console.log('‚è≥ Waiting for confirmation...\n');

    await sleep(10000);

    console.log('‚úÖ DEPLOYER AUTHORIZED!\n');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üìã Configuration:');
    console.log('   Factory:', factoryAddress.toString({ testOnly: network === 'testnet' }));
    console.log('   Owner:', ownerAddress.toString({ testOnly: network === 'testnet' }));
    console.log('   Deployer:', deployerAddress.toString({ testOnly: network === 'testnet' }));
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

    console.log('‚úÖ System is ready! The deployer can now pre-register deployments.\n');
})();
